package it.grupposnai.simulatore.services;

import com.fasterxml.jackson.databind.ObjectMapper;
import it.cogetech.lib.common.util.Configurazione;
import it.grupposnai.paymatcore.api.PaymatCoreApi;
import it.grupposnai.simulatore.kafka.KafkaInterceptor;
import it.grupposnai.paymatservices.model.request.generali.*;
import it.grupposnai.paymatservices.model.request.ricarica.*;
import it.grupposnai.paymatservices.model.response.generali.*;
import it.grupposnai.paymatservices.model.response.ricarica.*;
import it.grupposnai.simulatore.model.request.ricarica.CancelRicaricaTelefonicaRequest;
import it.grupposnai.simulatore.model.request.ricarica.ConfirmRicaricaTelefonicaRequest;
import it.grupposnai.simulatore.model.request.ricarica.ReserveRicaricaTelefonicaRequest;
import it.grupposnai.simulatore.model.response.ricarica.CancelRicaricaTelefonicaResponse2;
import it.grupposnai.simulatore.model.response.ricarica.ConfirmRicaricaTelefonicaResponse2;
import it.grupposnai.simulatore.model.response.ricarica.ReserveRicaricaTelefonicaResponse2;
import it.grupposnai.simulatore.util.CostantiWsPaymat;
import org.apache.log4j.Logger;

import javax.annotation.Resource;
import javax.interceptor.Interceptors;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.xml.ws.BindingType;
import javax.xml.ws.WebServiceContext;
import java.io.File;
import java.io.IOException;


/**
 * This class was generated by Apache CXF 3.1.8 2016-10-26T14:54:32.927+02:00
 * Generated source version: 3.1.8
 */
@Interceptors(KafkaInterceptor.class)
@javax.jws.WebService(targetNamespace = "http://ws.paymatservizi.it/")
@BindingType(value = "http://www.w3.org/2003/05/soap/bindings/HTTP/")
public class PaymatServiceSoap12Impl implements PaymatServiceSoap {

    @Resource
    WebServiceContext context;
    private static final Logger LOG = Logger.getLogger(PaymatServiceSoap12Impl.class.getName());
    private PaymatCoreApi paymatCoreApi;
    private static final Integer ID_BRAND_FASTWEB = 1;




    public ReserveRicaricaTelefonicaResponse2 reserveRicaricaTelefonica(ReserveRicaricaTelefonicaRequest request) {

        ReserveRicaricaTelefonicaResponse2 response = new ReserveRicaricaTelefonicaResponse2();
        response.setCallerId(request.getCallerId());
        response.setRequestId(request.getRequestId());

        if (request.validate() != null) {
            LOG.info("Request: " + request);
            response.setResultCode("1");
            response.setResultDesc(CostantiWsPaymat.VALIDATION_ERROR_DESC + ":" + request.validate());
            LOG.info("Response: " + response);
            return response;
        }

        ObjectMapper mapper = new ObjectMapper();
        String pathMockResponse = Configurazione.INSTANCE.getString(CostantiWsPaymat.MOCK_RESPONSE_RESERVE);
        String absolutPath = pathMockResponse + "_" + request.getBrand() + ".json";

        File file = new File(absolutPath);

        if (file.exists()) {

            try {
                response = mapper.readValue(file,ReserveRicaricaTelefonicaResponse2.class);
                response.setCallerId(request.getCallerId());
                response.setRequestId(request.getRequestId());
            } catch (IOException e) {
                response.setResultCode("100");
                response.setResultDesc("Errore nel recupero dei dati da file " + e.getMessage());
            }

        }else{
            response.setResultCode("100");
            response.setResultDesc("File contenente le informazioni mancante.");
        }

    return response;

    }


    public ConfirmRicaricaTelefonicaResponse2 confirmRicaricaTelefonica(ConfirmRicaricaTelefonicaRequest request) {
        ConfirmRicaricaTelefonicaResponse2 response = new ConfirmRicaricaTelefonicaResponse2();
        response.setCallerId(request.getCallerId());
        response.setRequestId(request.getRequestId());

        if (request.validate() != null) {
            LOG.info("Request: " + request);
            response.setResultCode("1");
            response.setResultDesc(CostantiWsPaymat.VALIDATION_ERROR_DESC + ":" + request.validate());
            LOG.info("Response: " + response);
            return response;
        }

        ObjectMapper mapper = new ObjectMapper();
        String pathMockResponse = Configurazione.INSTANCE.getString(CostantiWsPaymat.MOCK_RESPONSE_CONFIRM);
        String absolutPath = pathMockResponse + "_" + request.getBrand() + ".json";

        File file = new File(absolutPath);

        if (file.exists()) {
            try {
                response = mapper.readValue(file,ConfirmRicaricaTelefonicaResponse2.class);
                response.setCallerId(request.getCallerId());
                response.setRequestId(request.getRequestId());
            } catch (Exception e) {
                response.setResultCode("100");
                response.setResultDesc("Errore nel recupero dei dati da file " + e.getMessage());
            }

        }else{
            response.setResultCode("100");
            response.setResultDesc("File contenente le informazioni mancante.");
        }

        return response;

    }


    public CancelRicaricaTelefonicaResponse2 cancelRicaricaTelefonica(CancelRicaricaTelefonicaRequest request) {

        CancelRicaricaTelefonicaResponse2 response = new CancelRicaricaTelefonicaResponse2();
        response.setCallerId(request.getCallerId());
        response.setRequestId(request.getRequestId());

        if (request.validate() != null) {
            LOG.info("Request: " + request);
            response.setResultCode("1");
            response.setResultDesc(CostantiWsPaymat.VALIDATION_ERROR_DESC + ":" + request.validate());
            LOG.info("Response: " + response);
            return response;
        }

        ObjectMapper mapper = new ObjectMapper();
        String pathMockResponse = Configurazione.INSTANCE.getString(CostantiWsPaymat.MOCK_RESPONSE_CANCEL);

        File file = new File(pathMockResponse);

        if (file.exists()) {
            try {
                response = mapper.readValue(file,CancelRicaricaTelefonicaResponse2.class);
                response.setCallerId(request.getCallerId());
                response.setRequestId(request.getRequestId());
            } catch (IOException e) {
                response.setResultCode("100");
                response.setResultDesc("Errore nel recupero dei dati da file " + e.getMessage());
            }

        }else{
            response.setResultCode("100");
            response.setResultDesc("File contenente le informazioni mancante.");
        }

        return response;

    }




    private PaymatCoreApi getPaymatCoreApi() throws NamingException {
        if (this.paymatCoreApi == null) {
            try {
                this.paymatCoreApi = new PaymatCoreApi(true, new InitialContext());
            } catch (NamingException e) {
                LOG.error("Errore nella creazione di PaymatCoreApi", e);
                throw e;
            }
        }
        return this.paymatCoreApi;
    }





}
